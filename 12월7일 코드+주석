import pandas as pd  # 데이터 처리를 위해 pandas 라이브러리를 사용합니다.
# pandas는 CSV 파일과 같은 구조화된 데이터를 읽고, 정리하고, 분석하는 데 필요한 강력한 도구를 제공합니다.

class JobDataManager:
    """데이터 로드 및 관리 클래스"""
    def __init__(self, main_file_path, sector_file_paths):
        # __init__ 메서드는 객체를 초기화하는 생성자입니다.
        # 파일 경로를 인스턴스 변수로 저장하여 다른 메서드에서 접근할 수 있도록 합니다.
        self.main_file_path = main_file_path  # 분야 요약 데이터를 저장할 파일 경로
        self.sector_file_paths = sector_file_paths  # 분야별 상세 데이터 파일 경로를 저장합니다.
        self.main_data = None  # 메인 데이터를 저장할 변수 (아직 데이터를 로드하지 않았으므로 None으로 초기화)
        self.sector_data = None  # 분야별 데이터를 저장할 변수 (초기값은 None)

    def load_data(self):
        """데이터 로드 및 통합"""
        # CSV 파일을 읽어서 pandas 데이터프레임으로 변환합니다.
        # 데이터를 메모리에 로드하여 이후 작업에서 빠르게 접근할 수 있습니다.
        self.main_data = pd.read_csv(self.main_file_path, encoding='euc-kr')  
        # 분야별 데이터를 모두 읽어와 하나의 데이터프레임으로 통합합니다.
        self.sector_data = pd.concat(
            [
                # 각 파일을 읽어오고, 해당 데이터에 '분야'라는 새로운 열을 추가해 데이터를 구분합니다.
                pd.read_csv(path, encoding='euc-kr').assign(분야=name)  
                for name, path in self.sector_file_paths.items()
            ],
            ignore_index=True  # 기존 데이터프레임의 인덱스를 무시하고, 새로 부여된 인덱스를 사용합니다.
        )

    def filter_data(self, **conditions):
        """조건에 따라 데이터 필터링"""
        # 조건에 맞는 데이터를 선택하여 반환합니다.
        # 이는 데이터를 효율적으로 관리하고 특정 조건에 맞는 데이터를 검색할 때 필요합니다.
        df = self.sector_data  # 분야별 데이터를 작업 대상으로 설정합니다.
        for col, val in conditions.items():  # 조건 딕셔너리를 순회합니다.
            # 사용자가 입력한 조건에 맞는 데이터를 필터링합니다.
            df = df[df[col] == val]
        return df  # 필터링된 결과를 반환합니다.

class JobAssistant:
    """사용자 인터페이스 관리 클래스"""
    def __init__(self, manager):
        # JobDataManager 객체를 받아와 데이터와 상호작용합니다.
        self.manager = manager  # JobDataManager 객체를 저장하여 데이터를 처리하는 데 사용합니다.

    def get_user_input(self, prompt, options):
        """사용자 입력 헬퍼 함수"""
        # 사용자가 선택해야 할 옵션과 메시지를 출력합니다.
        print(prompt)  # 사용자에게 선택할 항목에 대한 설명을 출력합니다.
        for i, option in enumerate(options, 1):  # 옵션을 번호와 함께 나열합니다.
            print(f"{i}. {option}")
        try:
            # 사용자로부터 입력을 받아 정수로 변환합니다.
            choice = int(input("\n번호를 선택하세요: "))
            if 1 <= choice <= len(options):  # 입력값이 유효한 범위 내에 있는지 확인합니다.
                return options[choice - 1]  # 사용자가 선택한 옵션을 반환합니다.
        except ValueError:
            # 숫자가 아닌 값을 입력했을 경우 예외를 처리합니다.
            pass
        print("유효한 번호를 입력해주세요.")  # 잘못된 입력에 대한 메시지를 출력합니다.
        return None  # 유효하지 않은 입력일 경우 None을 반환합니다.

    def show_sector_summary(self):
        """분야별 요약 정보 출력"""
        # 사용자가 선택한 분야의 주요 정보를 출력합니다.
        print("\n분야를 선택하세요:")
        sector = self.get_user_input(
            # 사용자에게 분야 목록을 보여주고 선택하도록 합니다.
            "관심 있는 분야를 선택하세요:", self.manager.main_data['분야'].tolist()
        )
        if sector:  # 유효한 분야를 선택했을 경우
            # 선택한 분야에 대한 데이터를 가져옵니다.
            summary = self.manager.main_data[self.manager.main_data['분야'] == sector].iloc[0]
            # 분야 정보를 상세히 출력합니다.
            print(f"\n===== {sector} =====")
            print(f"**주요 직무**: {summary['주요 직무']}")  # 주요 직무를 보여줍니다.
            print(f"**취업 가능 기업**: {summary['취업 가능 기업']}")  # 취업 가능한 기업 목록을 보여줍니다.
            print(f"**필요 역량/기술**: {summary['필요 역량/기술']}")  # 해당 분야에서 필요한 역량 및 기술
            print(f"**추천 자격증**: {summary['추천 자격증']}")  # 추천되는 자격증 목록
            print(f"**추천 MBTI**: {summary['추천 MBTI']}")  # 적합한 MBTI 성격 유형

    def show_company_jobs(self):
        """기업별 채용 공고 출력"""
        # 사용자에게 분야를 선택하도록 요청합니다.
        print("\n분야를 선택하세요:")
        sector = self.get_user_input(
            # 분야 목록을 사용자에게 제공합니다.
            "관심 있는 분야를 선택하세요:", self.manager.sector_data['분야'].unique()
        )
        if sector:  # 선택된 분야가 유효할 경우
            # 선택된 분야에 속하는 기업 목록을 가져옵니다.
            companies = self.manager.filter_data(분야=sector)['기업명'].unique()
            company = self.get_user_input(f"[{sector}]의 기업을 선택하세요:", companies)
            if company:  # 선택된 기업이 유효할 경우
                # 선택된 기업의 채용 공고 데이터를 가져옵니다.
                details = self.manager.filter_data(분야=sector, 기업명=company)
                print(f"\n===== [{company}] 채용 공고 =====")
                # 각 채용 공고의 세부 정보를 출력합니다.
                for _, row in details.iterrows():
                    print(f"\n**채용 직무/분야**: {row['채용 직무/분야']}")
                    print(f"**주요 업무**: {row['주요 업무']}")
                    print(f"**지원 자격 및 우대사항**: {row['지원 자격 및 우대사항']}")
                    print(f"**근무 조건**: {row['근무 조건']}")
                    print(f"**모집 기간**: {row['모집 기간']}")
                    print(f"**지원 방법**: {row['지원 방법']}")
                    print(f"**기타 사항**: {row['기타 사항']}")
                    print("-----------------------------")

    def show_success_stories(self):
        """합격자소서 출력"""
        # 합격자 소서가 제공될 타겟 기업 목록을 정의합니다.
        target_companies = ["위지트", "넥슨", "LG생활건강", "롯데마트", "서울우유협동조합", "아모레퍼시픽", "기아"]
        sector_data = self.manager.sector_data  # 전체 데이터를 불러옵니다.

        # 대상 기업과 해당 분야를 매핑합니다.
        company_sector_map = {
            company: sector_data[sector_data['기업명'] == company]['분야'].iloc[0]
            for company in target_companies if company in sector_data['기업명'].unique()
        }

        # 기업 이름과 분야 정보를 함께 표시합니다.
        available_companies = [f"{company} ({company_sector_map[company]})" for company in company_sector_map]

        print("\n합격자소서를 보고 싶은 기업을 선택하세요:")
        selected = self.get_user_input("기업을 선택하세요:", available_companies)
        if selected:  # 선택한 기업이 유효한 경우
            # 기업 이름만 추출 (분야 제거)
            company = selected.split(" (")[0]
            # 선택된 기업의 데이터를 가져옵니다.
            details = sector_data[sector_data['기업명'] == company]
            # 합격자소서를 출력합니다. 데이터가 없을 경우 메시지를 표시합니다.
            story = details.iloc[0].get('합격자소서', '합격자소서 데이터가 없습니다.')
            print(f"\n===== [{company}] 합격자소서 =====")
            print(story)

    def start(self):
        """메인 실행 루프"""
        # 프로그램이 종료될 때까지 사용자의 선택을 반복적으로 처리합니다.
        while True:
            print("\n1. 분야별 취업 정보 요약")
            print("2. 기업별 취업 공고")
            print("3. 기업별 합격자소서 보기")
            print("4. 종료")
            
            choice = input("\n원하는 기능의 번호를 입력하세요: ")  # 사용자 입력
            if choice == '1':  # 분야 요약 보기
                self.show_sector_summary()
            elif choice == '2':  # 기업별 공고 보기
                self.show_company_jobs()
            elif choice == '3':  # 합격자 소서 보기
                self.show_success_stories()
            elif choice == '4':  # 프로그램 종료
                print("프로그램을 종료합니다.")
                break  # 루프를 종료하여 프로그램이 끝납니다.
            else:
                print("유효한 번호를 입력해주세요.")  # 잘못된 입력 안내

# 실행 코드
main_file_path = '/content/sample_data/취업.csv'  # 메인 데이터 파일 경로
file_paths = {  # 분야별 CSV 파일 경로
    "제조 및 생산 기업": "/content/sample_data/제조 및 생산 기업.csv",
    "데이터분석 기업": "/content/sample_data/데이터분석 기업.csv",
    "물류 및 SCM기업": "/content/sample_data/물류 및 SCM기업.csv",
    "IT 및 기술 개발 기업": "/content/sample_data/IT 및 기술 개발 기업.csv",
    "서비스 및 영업 기업": "/content/sample_data/서비스 및 영업 기업.csv",
    "경영 지원 및 컨설팅 기업": "/content/sample_data/경영 지원 및 컨설팅 기업.csv",
    "마케팅 및 기획 기업": "/content/sample_data/마케팅 및 기획 기업.csv",
}

# 데이터 관리 객체를 생성하고 데이터를 로드합니다.
manager = JobDataManager(main_file_path, file_paths)
manager.load_data()  # 데이터를 로드합니다.

# 사용자 인터페이스 객체를 생성하고 프로그램을 실행합니다.
assistant = JobAssistant(manager)
assistant.start()  # 프로그램 시작
